#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1426
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\DOCUMENTS AND SETTINGS\\STEVE\\MY DOCUMENTS\\ASP.NET 3.5 UNLEASHED\\SUPEREXPERT\\SU" +
	"PEREXPERT\\APP_DATA\\ASPNETDB.MDF")]
public partial class SuperexpertDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBlog(Blog instance);
  partial void UpdateBlog(Blog instance);
  partial void DeleteBlog(Blog instance);
  partial void InsertWebUser(WebUser instance);
  partial void UpdateWebUser(WebUser instance);
  partial void DeleteWebUser(WebUser instance);
  partial void InsertBlogComment(BlogComment instance);
  partial void UpdateBlogComment(BlogComment instance);
  partial void DeleteBlogComment(BlogComment instance);
  partial void InsertBlogTag(BlogTag instance);
  partial void UpdateBlogTag(BlogTag instance);
  partial void DeleteBlogTag(BlogTag instance);
  partial void InsertBook(Book instance);
  partial void UpdateBook(Book instance);
  partial void DeleteBook(Book instance);
  partial void InsertChapter(Chapter instance);
  partial void UpdateChapter(Chapter instance);
  partial void DeleteChapter(Chapter instance);
  partial void InsertCodeSample(CodeSample instance);
  partial void UpdateCodeSample(CodeSample instance);
  partial void DeleteCodeSample(CodeSample instance);
  partial void InsertCodeSampleLanguage(CodeSampleLanguage instance);
  partial void UpdateCodeSampleLanguage(CodeSampleLanguage instance);
  partial void DeleteCodeSampleLanguage(CodeSampleLanguage instance);
  partial void InsertEntry(Entry instance);
  partial void UpdateEntry(Entry instance);
  partial void DeleteEntry(Entry instance);
  partial void InsertEntryComment(EntryComment instance);
  partial void UpdateEntryComment(EntryComment instance);
  partial void DeleteEntryComment(EntryComment instance);
  partial void InsertEntryRating(EntryRating instance);
  partial void UpdateEntryRating(EntryRating instance);
  partial void DeleteEntryRating(EntryRating instance);
  partial void InsertEntryTag(EntryTag instance);
  partial void UpdateEntryTag(EntryTag instance);
  partial void DeleteEntryTag(EntryTag instance);
  partial void InsertListing(Listing instance);
  partial void UpdateListing(Listing instance);
  partial void DeleteListing(Listing instance);
  partial void InsertRelatedEntry(RelatedEntry instance);
  partial void UpdateRelatedEntry(RelatedEntry instance);
  partial void DeleteRelatedEntry(RelatedEntry instance);
  #endregion
	
	public SuperexpertDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public SuperexpertDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SuperexpertDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SuperexpertDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SuperexpertDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Blog> Blogs
	{
		get
		{
			return this.GetTable<Blog>();
		}
	}
	
	public System.Data.Linq.Table<WebUser> WebUsers
	{
		get
		{
			return this.GetTable<WebUser>();
		}
	}
	
	public System.Data.Linq.Table<BlogComment> BlogComments
	{
		get
		{
			return this.GetTable<BlogComment>();
		}
	}
	
	public System.Data.Linq.Table<BlogTag> BlogTags
	{
		get
		{
			return this.GetTable<BlogTag>();
		}
	}
	
	public System.Data.Linq.Table<Book> Books
	{
		get
		{
			return this.GetTable<Book>();
		}
	}
	
	public System.Data.Linq.Table<Chapter> Chapters
	{
		get
		{
			return this.GetTable<Chapter>();
		}
	}
	
	public System.Data.Linq.Table<CodeSample> CodeSamples
	{
		get
		{
			return this.GetTable<CodeSample>();
		}
	}
	
	public System.Data.Linq.Table<CodeSampleLanguage> CodeSampleLanguages
	{
		get
		{
			return this.GetTable<CodeSampleLanguage>();
		}
	}
	
	public System.Data.Linq.Table<Entry> Entries
	{
		get
		{
			return this.GetTable<Entry>();
		}
	}
	
	public System.Data.Linq.Table<EntryComment> EntryComments
	{
		get
		{
			return this.GetTable<EntryComment>();
		}
	}
	
	public System.Data.Linq.Table<EntryRating> EntryRatings
	{
		get
		{
			return this.GetTable<EntryRating>();
		}
	}
	
	public System.Data.Linq.Table<EntryTag> EntryTags
	{
		get
		{
			return this.GetTable<EntryTag>();
		}
	}
	
	public System.Data.Linq.Table<Listing> Listings
	{
		get
		{
			return this.GetTable<Listing>();
		}
	}
	
	public System.Data.Linq.Table<RelatedEntry> RelatedEntries
	{
		get
		{
			return this.GetTable<RelatedEntry>();
		}
	}
}

[Table(Name="dbo.Blog")]
public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _AuthorUserName;
	
	private string _Title;
	
	private string _IntroductionText;
	
	private string _Post;
	
	private System.DateTime _DateCreated = default(System.DateTime);
	
	private bool _IsPinned;
	
	private byte[] _Version;
	
	private EntitySet<BlogComment> _BlogComments;
	
	private EntitySet<BlogTag> _BlogTags;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAuthorUserNameChanging(string value);
    partial void OnAuthorUserNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIntroductionTextChanging(string value);
    partial void OnIntroductionTextChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnIsPinnedChanging(bool value);
    partial void OnIsPinnedChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public Blog()
	{
		this._BlogComments = new EntitySet<BlogComment>(new Action<BlogComment>(this.attach_BlogComments), new Action<BlogComment>(this.detach_BlogComments));
		this._BlogTags = new EntitySet<BlogTag>(new Action<BlogTag>(this.attach_BlogTags), new Action<BlogTag>(this.detach_BlogTags));
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_AuthorUserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string AuthorUserName
	{
		get
		{
			return this._AuthorUserName;
		}
		set
		{
			if ((this._AuthorUserName != value))
			{
				this.OnAuthorUserNameChanging(value);
				this.SendPropertyChanging();
				this._AuthorUserName = value;
				this.SendPropertyChanged("AuthorUserName");
				this.OnAuthorUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_IntroductionText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string IntroductionText
	{
		get
		{
			return this._IntroductionText;
		}
		set
		{
			if ((this._IntroductionText != value))
			{
				this.OnIntroductionTextChanging(value);
				this.SendPropertyChanging();
				this._IntroductionText = value;
				this.SendPropertyChanged("IntroductionText");
				this.OnIntroductionTextChanged();
			}
		}
	}
	
	[Column(Storage="_Post", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Post
	{
		get
		{
			return this._Post;
		}
		set
		{
			if ((this._Post != value))
			{
				this.OnPostChanging(value);
				this.SendPropertyChanging();
				this._Post = value;
				this.SendPropertyChanged("Post");
				this.OnPostChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
	}
	
	[Column(Storage="_IsPinned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool IsPinned
	{
		get
		{
			return this._IsPinned;
		}
		set
		{
			if ((this._IsPinned != value))
			{
				this.OnIsPinnedChanging(value);
				this.SendPropertyChanging();
				this._IsPinned = value;
				this.SendPropertyChanged("IsPinned");
				this.OnIsPinnedChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Blog_BlogComment", Storage="_BlogComments", OtherKey="BlogId")]
	public EntitySet<BlogComment> BlogComments
	{
		get
		{
			return this._BlogComments;
		}
		set
		{
			this._BlogComments.Assign(value);
		}
	}
	
	[Association(Name="Blog_BlogTag", Storage="_BlogTags", OtherKey="BlogId")]
	public EntitySet<BlogTag> BlogTags
	{
		get
		{
			return this._BlogTags;
		}
		set
		{
			this._BlogTags.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Blog = this;
	}
	
	private void detach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Blog = null;
	}
	
	private void attach_BlogTags(BlogTag entity)
	{
		this.SendPropertyChanging();
		entity.Blog = this;
	}
	
	private void detach_BlogTags(BlogTag entity)
	{
		this.SendPropertyChanging();
		entity.Blog = null;
	}
}

[Table(Name="dbo.WebUser")]
public partial class WebUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserName;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _WebsiteUrl;
	
	private string _Profile;
	
	private bool _ReceiveNewsletter;
	
	private byte[] _Version;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnWebsiteUrlChanging(string value);
    partial void OnWebsiteUrlChanged();
    partial void OnProfileChanging(string value);
    partial void OnProfileChanged();
    partial void OnReceiveNewsletterChanging(bool value);
    partial void OnReceiveNewsletterChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public WebUser()
	{
		OnCreated();
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_WebsiteUrl", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
	public string WebsiteUrl
	{
		get
		{
			return this._WebsiteUrl;
		}
		set
		{
			if ((this._WebsiteUrl != value))
			{
				this.OnWebsiteUrlChanging(value);
				this.SendPropertyChanging();
				this._WebsiteUrl = value;
				this.SendPropertyChanged("WebsiteUrl");
				this.OnWebsiteUrlChanged();
			}
		}
	}
	
	[Column(Storage="_Profile", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string Profile
	{
		get
		{
			return this._Profile;
		}
		set
		{
			if ((this._Profile != value))
			{
				this.OnProfileChanging(value);
				this.SendPropertyChanging();
				this._Profile = value;
				this.SendPropertyChanged("Profile");
				this.OnProfileChanged();
			}
		}
	}
	
	[Column(Storage="_ReceiveNewsletter", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool ReceiveNewsletter
	{
		get
		{
			return this._ReceiveNewsletter;
		}
		set
		{
			if ((this._ReceiveNewsletter != value))
			{
				this.OnReceiveNewsletterChanging(value);
				this.SendPropertyChanging();
				this._ReceiveNewsletter = value;
				this.SendPropertyChanged("ReceiveNewsletter");
				this.OnReceiveNewsletterChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.BlogComment")]
public partial class BlogComment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _BlogId;
	
	private string _AuthorUserName;
	
	private string _Title;
	
	private string _Comment;
	
	private System.DateTime _DateCreated = default(System.DateTime);
	
	private byte[] _Version;
	
	private EntityRef<Blog> _Blog;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnAuthorUserNameChanging(string value);
    partial void OnAuthorUserNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public BlogComment()
	{
		this._Blog = default(EntityRef<Blog>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_BlogId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int BlogId
	{
		get
		{
			return this._BlogId;
		}
		set
		{
			if ((this._BlogId != value))
			{
				if (this._Blog.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBlogIdChanging(value);
				this.SendPropertyChanging();
				this._BlogId = value;
				this.SendPropertyChanged("BlogId");
				this.OnBlogIdChanged();
			}
		}
	}
	
	[Column(Storage="_AuthorUserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string AuthorUserName
	{
		get
		{
			return this._AuthorUserName;
		}
		set
		{
			if ((this._AuthorUserName != value))
			{
				this.OnAuthorUserNameChanging(value);
				this.SendPropertyChanging();
				this._AuthorUserName = value;
				this.SendPropertyChanged("AuthorUserName");
				this.OnAuthorUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Blog_BlogComment", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Blog Blog
	{
		get
		{
			return this._Blog.Entity;
		}
		set
		{
			Blog previousValue = this._Blog.Entity;
			if (((previousValue != value) 
						|| (this._Blog.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Blog.Entity = null;
					previousValue.BlogComments.Remove(this);
				}
				this._Blog.Entity = value;
				if ((value != null))
				{
					value.BlogComments.Add(this);
					this._BlogId = value.Id;
				}
				else
				{
					this._BlogId = default(int);
				}
				this.SendPropertyChanged("Blog");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.BlogTag")]
public partial class BlogTag : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _BlogId;
	
	private string _Name;
	
	private byte[] _Version;
	
	private EntityRef<Blog> _Blog;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public BlogTag()
	{
		this._Blog = default(EntityRef<Blog>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_BlogId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int BlogId
	{
		get
		{
			return this._BlogId;
		}
		set
		{
			if ((this._BlogId != value))
			{
				if (this._Blog.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBlogIdChanging(value);
				this.SendPropertyChanging();
				this._BlogId = value;
				this.SendPropertyChanged("BlogId");
				this.OnBlogIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Blog_BlogTag", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
	public Blog Blog
	{
		get
		{
			return this._Blog.Entity;
		}
		set
		{
			Blog previousValue = this._Blog.Entity;
			if (((previousValue != value) 
						|| (this._Blog.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Blog.Entity = null;
					previousValue.BlogTags.Remove(this);
				}
				this._Blog.Entity = value;
				if ((value != null))
				{
					value.BlogTags.Add(this);
					this._BlogId = value.Id;
				}
				else
				{
					this._BlogId = default(int);
				}
				this.SendPropertyChanged("Blog");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Book")]
public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Title;
	
	private string _Authors;
	
	private string _Description;
	
	private string _BuyLink;
	
	private string _CoverPicture;
	
	private byte[] _Version;
	
	private EntitySet<Chapter> _Chapters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorsChanging(string value);
    partial void OnAuthorsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBuyLinkChanging(string value);
    partial void OnBuyLinkChanged();
    partial void OnCoverPictureChanging(string value);
    partial void OnCoverPictureChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public Book()
	{
		this._Chapters = new EntitySet<Chapter>(new Action<Chapter>(this.attach_Chapters), new Action<Chapter>(this.detach_Chapters));
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Authors", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Authors
	{
		get
		{
			return this._Authors;
		}
		set
		{
			if ((this._Authors != value))
			{
				this.OnAuthorsChanging(value);
				this.SendPropertyChanging();
				this._Authors = value;
				this.SendPropertyChanged("Authors");
				this.OnAuthorsChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_BuyLink", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string BuyLink
	{
		get
		{
			return this._BuyLink;
		}
		set
		{
			if ((this._BuyLink != value))
			{
				this.OnBuyLinkChanging(value);
				this.SendPropertyChanging();
				this._BuyLink = value;
				this.SendPropertyChanged("BuyLink");
				this.OnBuyLinkChanged();
			}
		}
	}
	
	[Column(Storage="_CoverPicture", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string CoverPicture
	{
		get
		{
			return this._CoverPicture;
		}
		set
		{
			if ((this._CoverPicture != value))
			{
				this.OnCoverPictureChanging(value);
				this.SendPropertyChanging();
				this._CoverPicture = value;
				this.SendPropertyChanged("CoverPicture");
				this.OnCoverPictureChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Book_Chapter", Storage="_Chapters", OtherKey="BookId")]
	public EntitySet<Chapter> Chapters
	{
		get
		{
			return this._Chapters;
		}
		set
		{
			this._Chapters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Chapters(Chapter entity)
	{
		this.SendPropertyChanging();
		entity.Book = this;
	}
	
	private void detach_Chapters(Chapter entity)
	{
		this.SendPropertyChanging();
		entity.Book = null;
	}
}

[Table(Name="dbo.Chapter")]
public partial class Chapter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _BookId;
	
	private string _Title;
	
	private string _Description;
	
	private int _OrderNumber;
	
	private byte[] _Version;
	
	private EntityRef<Book> _Book;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public Chapter()
	{
		this._Book = default(EntityRef<Book>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_BookId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int BookId
	{
		get
		{
			return this._BookId;
		}
		set
		{
			if ((this._BookId != value))
			{
				if (this._Book.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBookIdChanging(value);
				this.SendPropertyChanging();
				this._BookId = value;
				this.SendPropertyChanged("BookId");
				this.OnBookIdChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_OrderNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Book_Chapter", Storage="_Book", ThisKey="BookId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Book Book
	{
		get
		{
			return this._Book.Entity;
		}
		set
		{
			Book previousValue = this._Book.Entity;
			if (((previousValue != value) 
						|| (this._Book.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Book.Entity = null;
					previousValue.Chapters.Remove(this);
				}
				this._Book.Entity = value;
				if ((value != null))
				{
					value.Chapters.Add(this);
					this._BookId = value.Id;
				}
				else
				{
					this._BookId = default(int);
				}
				this.SendPropertyChanged("Book");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CodeSample")]
public partial class CodeSample : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _EntryId;
	
	private string _FileName;
	
	private System.Nullable<int> _LanguageId;
	
	private string _Code;
	
	private string _TryItCode;
	
	private bool _EnableTryIt;
	
	private string _Description;
	
	private System.DateTime _DateCreated = default(System.DateTime);
	
	private System.Nullable<System.DateTime> _DateModified = default(System.Nullable<System.DateTime>);
	
	private byte[] _Version;
	
	private EntityRef<CodeSampleLanguage> _CodeSampleLanguage;
	
	private EntityRef<Entry> _Entry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLanguageIdChanging(System.Nullable<int> value);
    partial void OnLanguageIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTryItCodeChanging(string value);
    partial void OnTryItCodeChanged();
    partial void OnEnableTryItChanging(bool value);
    partial void OnEnableTryItChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public CodeSample()
	{
		this._CodeSampleLanguage = default(EntityRef<CodeSampleLanguage>);
		this._Entry = default(EntityRef<Entry>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				if (this._Entry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_FileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[Column(Storage="_LanguageId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> LanguageId
	{
		get
		{
			return this._LanguageId;
		}
		set
		{
			if ((this._LanguageId != value))
			{
				if (this._CodeSampleLanguage.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLanguageIdChanging(value);
				this.SendPropertyChanging();
				this._LanguageId = value;
				this.SendPropertyChanged("LanguageId");
				this.OnLanguageIdChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_TryItCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string TryItCode
	{
		get
		{
			return this._TryItCode;
		}
		set
		{
			if ((this._TryItCode != value))
			{
				this.OnTryItCodeChanging(value);
				this.SendPropertyChanging();
				this._TryItCode = value;
				this.SendPropertyChanged("TryItCode");
				this.OnTryItCodeChanged();
			}
		}
	}
	
	[Column(Storage="_EnableTryIt", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool EnableTryIt
	{
		get
		{
			return this._EnableTryIt;
		}
		set
		{
			if ((this._EnableTryIt != value))
			{
				this.OnEnableTryItChanging(value);
				this.SendPropertyChanging();
				this._EnableTryIt = value;
				this.SendPropertyChanged("EnableTryIt");
				this.OnEnableTryItChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
	}
	
	[Column(Storage="_DateModified", DbType="DateTime", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="CodeSampleLanguage_CodeSample", Storage="_CodeSampleLanguage", ThisKey="LanguageId", IsForeignKey=true)]
	public CodeSampleLanguage CodeSampleLanguage
	{
		get
		{
			return this._CodeSampleLanguage.Entity;
		}
		set
		{
			CodeSampleLanguage previousValue = this._CodeSampleLanguage.Entity;
			if (((previousValue != value) 
						|| (this._CodeSampleLanguage.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CodeSampleLanguage.Entity = null;
					previousValue.CodeSamples.Remove(this);
				}
				this._CodeSampleLanguage.Entity = value;
				if ((value != null))
				{
					value.CodeSamples.Add(this);
					this._LanguageId = value.Id;
				}
				else
				{
					this._LanguageId = default(Nullable<int>);
				}
				this.SendPropertyChanged("CodeSampleLanguage");
			}
		}
	}
	
	[Association(Name="Entry_CodeSample", Storage="_Entry", ThisKey="EntryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Entry Entry
	{
		get
		{
			return this._Entry.Entity;
		}
		set
		{
			Entry previousValue = this._Entry.Entity;
			if (((previousValue != value) 
						|| (this._Entry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entry.Entity = null;
					previousValue.CodeSamples.Remove(this);
				}
				this._Entry.Entity = value;
				if ((value != null))
				{
					value.CodeSamples.Add(this);
					this._EntryId = value.Id;
				}
				else
				{
					this._EntryId = default(int);
				}
				this.SendPropertyChanged("Entry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CodeSampleLanguage")]
public partial class CodeSampleLanguage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private EntitySet<CodeSample> _CodeSamples;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public CodeSampleLanguage()
	{
		this._CodeSamples = new EntitySet<CodeSample>(new Action<CodeSample>(this.attach_CodeSamples), new Action<CodeSample>(this.detach_CodeSamples));
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="CodeSampleLanguage_CodeSample", Storage="_CodeSamples", OtherKey="LanguageId")]
	public EntitySet<CodeSample> CodeSamples
	{
		get
		{
			return this._CodeSamples;
		}
		set
		{
			this._CodeSamples.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CodeSamples(CodeSample entity)
	{
		this.SendPropertyChanging();
		entity.CodeSampleLanguage = this;
	}
	
	private void detach_CodeSamples(CodeSample entity)
	{
		this.SendPropertyChanging();
		entity.CodeSampleLanguage = null;
	}
}

[Table(Name="dbo.Entry")]
public partial class Entry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _AuthorUserName;
	
	private string _Title;
	
	private string _IntroductionText;
	
	private string _Description;
	
	private int _ViewCount;
	
	private System.DateTime _DateCreated = default(System.DateTime);
	
	private System.Nullable<System.DateTime> _DateModified;
	
	private byte[] _Version;
	
	private EntitySet<CodeSample> _CodeSamples;
	
	private EntitySet<EntryComment> _EntryComments;
	
	private EntitySet<EntryTag> _EntryTags;
	
	private EntitySet<RelatedEntry> _RelatedEntries;
	
	private EntitySet<RelatedEntry> _RelatedEntries1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAuthorUserNameChanging(string value);
    partial void OnAuthorUserNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIntroductionTextChanging(string value);
    partial void OnIntroductionTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnViewCountChanging(int value);
    partial void OnViewCountChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public Entry()
	{
		this._CodeSamples = new EntitySet<CodeSample>(new Action<CodeSample>(this.attach_CodeSamples), new Action<CodeSample>(this.detach_CodeSamples));
		this._EntryComments = new EntitySet<EntryComment>(new Action<EntryComment>(this.attach_EntryComments), new Action<EntryComment>(this.detach_EntryComments));
		this._EntryTags = new EntitySet<EntryTag>(new Action<EntryTag>(this.attach_EntryTags), new Action<EntryTag>(this.detach_EntryTags));
		this._RelatedEntries = new EntitySet<RelatedEntry>(new Action<RelatedEntry>(this.attach_RelatedEntries), new Action<RelatedEntry>(this.detach_RelatedEntries));
		this._RelatedEntries1 = new EntitySet<RelatedEntry>(new Action<RelatedEntry>(this.attach_RelatedEntries1), new Action<RelatedEntry>(this.detach_RelatedEntries1));
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_AuthorUserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string AuthorUserName
	{
		get
		{
			return this._AuthorUserName;
		}
		set
		{
			if ((this._AuthorUserName != value))
			{
				this.OnAuthorUserNameChanging(value);
				this.SendPropertyChanging();
				this._AuthorUserName = value;
				this.SendPropertyChanged("AuthorUserName");
				this.OnAuthorUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_IntroductionText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string IntroductionText
	{
		get
		{
			return this._IntroductionText;
		}
		set
		{
			if ((this._IntroductionText != value))
			{
				this.OnIntroductionTextChanging(value);
				this.SendPropertyChanging();
				this._IntroductionText = value;
				this.SendPropertyChanged("IntroductionText");
				this.OnIntroductionTextChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ViewCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ViewCount
	{
		get
		{
			return this._ViewCount;
		}
		set
		{
			if ((this._ViewCount != value))
			{
				this.OnViewCountChanging(value);
				this.SendPropertyChanging();
				this._ViewCount = value;
				this.SendPropertyChanged("ViewCount");
				this.OnViewCountChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
	}
	
	[Column(Storage="_DateModified", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
		set
		{
			if ((this._DateModified != value))
			{
				this.OnDateModifiedChanging(value);
				this.SendPropertyChanging();
				this._DateModified = value;
				this.SendPropertyChanged("DateModified");
				this.OnDateModifiedChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Entry_CodeSample", Storage="_CodeSamples", OtherKey="EntryId")]
	public EntitySet<CodeSample> CodeSamples
	{
		get
		{
			return this._CodeSamples;
		}
		set
		{
			this._CodeSamples.Assign(value);
		}
	}
	
	[Association(Name="Entry_EntryComment", Storage="_EntryComments", OtherKey="EntryId")]
	public EntitySet<EntryComment> EntryComments
	{
		get
		{
			return this._EntryComments;
		}
		set
		{
			this._EntryComments.Assign(value);
		}
	}
	
	[Association(Name="Entry_EntryTag", Storage="_EntryTags", OtherKey="EntryId")]
	public EntitySet<EntryTag> EntryTags
	{
		get
		{
			return this._EntryTags;
		}
		set
		{
			this._EntryTags.Assign(value);
		}
	}
	
	[Association(Name="Entry_RelatedEntry", Storage="_RelatedEntries", OtherKey="EntryId")]
	public EntitySet<RelatedEntry> RelatedEntries
	{
		get
		{
			return this._RelatedEntries;
		}
		set
		{
			this._RelatedEntries.Assign(value);
		}
	}
	
	[Association(Name="Entry_RelatedEntry1", Storage="_RelatedEntries1", OtherKey="RelatedEntryId")]
	public EntitySet<RelatedEntry> RelatedEntries1
	{
		get
		{
			return this._RelatedEntries1;
		}
		set
		{
			this._RelatedEntries1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CodeSamples(CodeSample entity)
	{
		this.SendPropertyChanging();
		entity.Entry = this;
	}
	
	private void detach_CodeSamples(CodeSample entity)
	{
		this.SendPropertyChanging();
		entity.Entry = null;
	}
	
	private void attach_EntryComments(EntryComment entity)
	{
		this.SendPropertyChanging();
		entity.Entry = this;
	}
	
	private void detach_EntryComments(EntryComment entity)
	{
		this.SendPropertyChanging();
		entity.Entry = null;
	}
	
	private void attach_EntryTags(EntryTag entity)
	{
		this.SendPropertyChanging();
		entity.Entry = this;
	}
	
	private void detach_EntryTags(EntryTag entity)
	{
		this.SendPropertyChanging();
		entity.Entry = null;
	}
	
	private void attach_RelatedEntries(RelatedEntry entity)
	{
		this.SendPropertyChanging();
		entity.Entry = this;
	}
	
	private void detach_RelatedEntries(RelatedEntry entity)
	{
		this.SendPropertyChanging();
		entity.Entry = null;
	}
	
	private void attach_RelatedEntries1(RelatedEntry entity)
	{
		this.SendPropertyChanging();
		entity.Entry1 = this;
	}
	
	private void detach_RelatedEntries1(RelatedEntry entity)
	{
		this.SendPropertyChanging();
		entity.Entry1 = null;
	}
}

[Table(Name="dbo.EntryComments")]
public partial class EntryComment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _EntryId;
	
	private string _UserName;
	
	private string _Comment;
	
	private string _DateCreated;
	
	private EntityRef<Entry> _Entry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDateCreatedChanging(string value);
    partial void OnDateCreatedChanged();
    #endregion
	
	public EntryComment()
	{
		this._Entry = default(EntityRef<Entry>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL")]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				if (this._Entry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[Association(Name="Entry_EntryComment", Storage="_Entry", ThisKey="EntryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Entry Entry
	{
		get
		{
			return this._Entry.Entity;
		}
		set
		{
			Entry previousValue = this._Entry.Entity;
			if (((previousValue != value) 
						|| (this._Entry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entry.Entity = null;
					previousValue.EntryComments.Remove(this);
				}
				this._Entry.Entity = value;
				if ((value != null))
				{
					value.EntryComments.Add(this);
					this._EntryId = value.Id;
				}
				else
				{
					this._EntryId = default(int);
				}
				this.SendPropertyChanged("Entry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EntryRating")]
public partial class EntryRating : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _EntryId;
	
	private int _Rating;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
	
	public EntryRating()
	{
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL")]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_Rating", DbType="Int NOT NULL")]
	public int Rating
	{
		get
		{
			return this._Rating;
		}
		set
		{
			if ((this._Rating != value))
			{
				this.OnRatingChanging(value);
				this.SendPropertyChanging();
				this._Rating = value;
				this.SendPropertyChanged("Rating");
				this.OnRatingChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EntryTag")]
public partial class EntryTag : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _EntryId;
	
	private string _Name;
	
	private byte[] _Version;
	
	private EntityRef<Entry> _Entry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public EntryTag()
	{
		this._Entry = default(EntityRef<Entry>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				if (this._Entry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Entry_EntryTag", Storage="_Entry", ThisKey="EntryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Entry Entry
	{
		get
		{
			return this._Entry.Entity;
		}
		set
		{
			Entry previousValue = this._Entry.Entity;
			if (((previousValue != value) 
						|| (this._Entry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entry.Entity = null;
					previousValue.EntryTags.Remove(this);
				}
				this._Entry.Entity = value;
				if ((value != null))
				{
					value.EntryTags.Add(this);
					this._EntryId = value.Id;
				}
				else
				{
					this._EntryId = default(int);
				}
				this.SendPropertyChanged("Entry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Listing")]
public partial class Listing : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _ChapterId;
	
	private int _EntryId;
	
	private int _OrderNumber;
	
	private byte[] _Version;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChapterIdChanging(int value);
    partial void OnChapterIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
	
	public Listing()
	{
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_ChapterId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ChapterId
	{
		get
		{
			return this._ChapterId;
		}
		set
		{
			if ((this._ChapterId != value))
			{
				this.OnChapterIdChanging(value);
				this.SendPropertyChanging();
				this._ChapterId = value;
				this.SendPropertyChanged("ChapterId");
				this.OnChapterIdChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_OrderNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public byte[] Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.RelatedEntries")]
public partial class RelatedEntry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UserName;
	
	private int _EntryId;
	
	private int _RelatedEntryId;
	
	private System.DateTime _DateCreated;
	
	private EntityRef<Entry> _Entry;
	
	private EntityRef<Entry> _Entry1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnRelatedEntryIdChanging(int value);
    partial void OnRelatedEntryIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
	
	public RelatedEntry()
	{
		this._Entry = default(EntityRef<Entry>);
		this._Entry1 = default(EntityRef<Entry>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_EntryId", DbType="Int NOT NULL")]
	public int EntryId
	{
		get
		{
			return this._EntryId;
		}
		set
		{
			if ((this._EntryId != value))
			{
				if (this._Entry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryIdChanging(value);
				this.SendPropertyChanging();
				this._EntryId = value;
				this.SendPropertyChanged("EntryId");
				this.OnEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_RelatedEntryId", DbType="Int NOT NULL")]
	public int RelatedEntryId
	{
		get
		{
			return this._RelatedEntryId;
		}
		set
		{
			if ((this._RelatedEntryId != value))
			{
				if (this._Entry1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRelatedEntryIdChanging(value);
				this.SendPropertyChanging();
				this._RelatedEntryId = value;
				this.SendPropertyChanged("RelatedEntryId");
				this.OnRelatedEntryIdChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[Association(Name="Entry_RelatedEntry", Storage="_Entry", ThisKey="EntryId", IsForeignKey=true)]
	public Entry Entry
	{
		get
		{
			return this._Entry.Entity;
		}
		set
		{
			Entry previousValue = this._Entry.Entity;
			if (((previousValue != value) 
						|| (this._Entry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entry.Entity = null;
					previousValue.RelatedEntries.Remove(this);
				}
				this._Entry.Entity = value;
				if ((value != null))
				{
					value.RelatedEntries.Add(this);
					this._EntryId = value.Id;
				}
				else
				{
					this._EntryId = default(int);
				}
				this.SendPropertyChanged("Entry");
			}
		}
	}
	
	[Association(Name="Entry_RelatedEntry1", Storage="_Entry1", ThisKey="RelatedEntryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Entry Entry1
	{
		get
		{
			return this._Entry1.Entity;
		}
		set
		{
			Entry previousValue = this._Entry1.Entity;
			if (((previousValue != value) 
						|| (this._Entry1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entry1.Entity = null;
					previousValue.RelatedEntries1.Remove(this);
				}
				this._Entry1.Entity = value;
				if ((value != null))
				{
					value.RelatedEntries1.Add(this);
					this._RelatedEntryId = value.Id;
				}
				else
				{
					this._RelatedEntryId = default(int);
				}
				this.SendPropertyChanged("Entry1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
