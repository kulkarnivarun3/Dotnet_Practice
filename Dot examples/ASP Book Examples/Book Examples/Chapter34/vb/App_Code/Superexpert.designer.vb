'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1426
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="C:\DOCUMENTS AND SETTINGS\STEVE\MY DOCUMENTS\ASP.NET 3.5 UNLEASHED\CHAPTER34\CODE"& _ 
	"\VB\APP_DATA\ASPNETDB.MDF")>  _
Partial Public Class SuperexpertDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBlog(instance As Blog)
    End Sub
  Partial Private Sub UpdateBlog(instance As Blog)
    End Sub
  Partial Private Sub DeleteBlog(instance As Blog)
    End Sub
  Partial Private Sub InsertWebUser(instance As WebUser)
    End Sub
  Partial Private Sub UpdateWebUser(instance As WebUser)
    End Sub
  Partial Private Sub DeleteWebUser(instance As WebUser)
    End Sub
  Partial Private Sub InsertBlogComment(instance As BlogComment)
    End Sub
  Partial Private Sub UpdateBlogComment(instance As BlogComment)
    End Sub
  Partial Private Sub DeleteBlogComment(instance As BlogComment)
    End Sub
  Partial Private Sub InsertBlogTag(instance As BlogTag)
    End Sub
  Partial Private Sub UpdateBlogTag(instance As BlogTag)
    End Sub
  Partial Private Sub DeleteBlogTag(instance As BlogTag)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  Partial Private Sub InsertChapter(instance As Chapter)
    End Sub
  Partial Private Sub UpdateChapter(instance As Chapter)
    End Sub
  Partial Private Sub DeleteChapter(instance As Chapter)
    End Sub
  Partial Private Sub InsertCodeSample(instance As CodeSample)
    End Sub
  Partial Private Sub UpdateCodeSample(instance As CodeSample)
    End Sub
  Partial Private Sub DeleteCodeSample(instance As CodeSample)
    End Sub
  Partial Private Sub InsertCodeSampleLanguage(instance As CodeSampleLanguage)
    End Sub
  Partial Private Sub UpdateCodeSampleLanguage(instance As CodeSampleLanguage)
    End Sub
  Partial Private Sub DeleteCodeSampleLanguage(instance As CodeSampleLanguage)
    End Sub
  Partial Private Sub InsertEntry(instance As Entry)
    End Sub
  Partial Private Sub UpdateEntry(instance As Entry)
    End Sub
  Partial Private Sub DeleteEntry(instance As Entry)
    End Sub
  Partial Private Sub InsertEntryComment(instance As EntryComment)
    End Sub
  Partial Private Sub UpdateEntryComment(instance As EntryComment)
    End Sub
  Partial Private Sub DeleteEntryComment(instance As EntryComment)
    End Sub
  Partial Private Sub InsertEntryRating(instance As EntryRating)
    End Sub
  Partial Private Sub UpdateEntryRating(instance As EntryRating)
    End Sub
  Partial Private Sub DeleteEntryRating(instance As EntryRating)
    End Sub
  Partial Private Sub InsertEntryTag(instance As EntryTag)
    End Sub
  Partial Private Sub UpdateEntryTag(instance As EntryTag)
    End Sub
  Partial Private Sub DeleteEntryTag(instance As EntryTag)
    End Sub
  Partial Private Sub InsertListing(instance As Listing)
    End Sub
  Partial Private Sub UpdateListing(instance As Listing)
    End Sub
  Partial Private Sub DeleteListing(instance As Listing)
    End Sub
  Partial Private Sub InsertRelatedEntry(instance As RelatedEntry)
    End Sub
  Partial Private Sub UpdateRelatedEntry(instance As RelatedEntry)
    End Sub
  Partial Private Sub DeleteRelatedEntry(instance As RelatedEntry)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ASPNETDBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Blogs() As System.Data.Linq.Table(Of Blog)
		Get
			Return Me.GetTable(Of Blog)
		End Get
	End Property
	
	Public ReadOnly Property WebUsers() As System.Data.Linq.Table(Of WebUser)
		Get
			Return Me.GetTable(Of WebUser)
		End Get
	End Property
	
	Public ReadOnly Property BlogComments() As System.Data.Linq.Table(Of BlogComment)
		Get
			Return Me.GetTable(Of BlogComment)
		End Get
	End Property
	
	Public ReadOnly Property BlogTags() As System.Data.Linq.Table(Of BlogTag)
		Get
			Return Me.GetTable(Of BlogTag)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
	
	Public ReadOnly Property Chapters() As System.Data.Linq.Table(Of Chapter)
		Get
			Return Me.GetTable(Of Chapter)
		End Get
	End Property
	
	Public ReadOnly Property CodeSamples() As System.Data.Linq.Table(Of CodeSample)
		Get
			Return Me.GetTable(Of CodeSample)
		End Get
	End Property
	
	Public ReadOnly Property CodeSampleLanguages() As System.Data.Linq.Table(Of CodeSampleLanguage)
		Get
			Return Me.GetTable(Of CodeSampleLanguage)
		End Get
	End Property
	
	Public ReadOnly Property Entries() As System.Data.Linq.Table(Of Entry)
		Get
			Return Me.GetTable(Of Entry)
		End Get
	End Property
	
	Public ReadOnly Property EntryComments() As System.Data.Linq.Table(Of EntryComment)
		Get
			Return Me.GetTable(Of EntryComment)
		End Get
	End Property
	
	Public ReadOnly Property EntryRatings() As System.Data.Linq.Table(Of EntryRating)
		Get
			Return Me.GetTable(Of EntryRating)
		End Get
	End Property
	
	Public ReadOnly Property EntryTags() As System.Data.Linq.Table(Of EntryTag)
		Get
			Return Me.GetTable(Of EntryTag)
		End Get
	End Property
	
	Public ReadOnly Property Listings() As System.Data.Linq.Table(Of Listing)
		Get
			Return Me.GetTable(Of Listing)
		End Get
	End Property
	
	Public ReadOnly Property RelatedEntries() As System.Data.Linq.Table(Of RelatedEntry)
		Get
			Return Me.GetTable(Of RelatedEntry)
		End Get
	End Property
End Class

<Table(Name:="dbo.Blog")>  _
Partial Public Class Blog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _AuthorUserName As String
	
	Private _Title As String
	
	Private _IntroductionText As String
	
	Private _Post As String
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _IsPinned As Boolean
	
	Private _Version() As Byte
	
	Private _BlogComments As EntitySet(Of BlogComment)
	
	Private _BlogTags As EntitySet(Of BlogTag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAuthorUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorUserNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnIntroductionTextChanging(value As String)
    End Sub
    Partial Private Sub OnIntroductionTextChanged()
    End Sub
    Partial Private Sub OnPostChanging(value As String)
    End Sub
    Partial Private Sub OnPostChanged()
    End Sub
    Partial Private Sub OnIsPinnedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPinnedChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogComments = New EntitySet(Of BlogComment)(AddressOf Me.attach_BlogComments, AddressOf Me.detach_BlogComments)
		Me._BlogTags = New EntitySet(Of BlogTag)(AddressOf Me.attach_BlogTags, AddressOf Me.detach_BlogTags)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AuthorUserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AuthorUserName() As String
		Get
			Return Me._AuthorUserName
		End Get
		Set
			If (String.Equals(Me._AuthorUserName, value) = false) Then
				Me.OnAuthorUserNameChanging(value)
				Me.SendPropertyChanging
				Me._AuthorUserName = value
				Me.SendPropertyChanged("AuthorUserName")
				Me.OnAuthorUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IntroductionText", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IntroductionText() As String
		Get
			Return Me._IntroductionText
		End Get
		Set
			If (String.Equals(Me._IntroductionText, value) = false) Then
				Me.OnIntroductionTextChanging(value)
				Me.SendPropertyChanging
				Me._IntroductionText = value
				Me.SendPropertyChanged("IntroductionText")
				Me.OnIntroductionTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Post", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Post() As String
		Get
			Return Me._Post
		End Get
		Set
			If (String.Equals(Me._Post, value) = false) Then
				Me.OnPostChanging(value)
				Me.SendPropertyChanging
				Me._Post = value
				Me.SendPropertyChanged("Post")
				Me.OnPostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_IsPinned", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IsPinned() As Boolean
		Get
			Return Me._IsPinned
		End Get
		Set
			If ((Me._IsPinned = value)  _
						= false) Then
				Me.OnIsPinnedChanging(value)
				Me.SendPropertyChanging
				Me._IsPinned = value
				Me.SendPropertyChanged("IsPinned")
				Me.OnIsPinnedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Blog_BlogComment", Storage:="_BlogComments", OtherKey:="BlogId")>  _
	Public Property BlogComments() As EntitySet(Of BlogComment)
		Get
			Return Me._BlogComments
		End Get
		Set
			Me._BlogComments.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Blog_BlogTag", Storage:="_BlogTags", OtherKey:="BlogId")>  _
	Public Property BlogTags() As EntitySet(Of BlogTag)
		Get
			Return Me._BlogTags
		End Get
		Set
			Me._BlogTags.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BlogComments(ByVal entity As BlogComment)
		Me.SendPropertyChanging
		entity.Blog = Me
	End Sub
	
	Private Sub detach_BlogComments(ByVal entity As BlogComment)
		Me.SendPropertyChanging
		entity.Blog = Nothing
	End Sub
	
	Private Sub attach_BlogTags(ByVal entity As BlogTag)
		Me.SendPropertyChanging
		entity.Blog = Me
	End Sub
	
	Private Sub detach_BlogTags(ByVal entity As BlogTag)
		Me.SendPropertyChanging
		entity.Blog = Nothing
	End Sub
End Class

<Table(Name:="dbo.WebUser")>  _
Partial Public Class WebUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _WebsiteUrl As String
	
	Private _Profile As String
	
	Private _ReceiveNewsletter As Boolean
	
	Private _Version() As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnWebsiteUrlChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteUrlChanged()
    End Sub
    Partial Private Sub OnProfileChanging(value As String)
    End Sub
    Partial Private Sub OnProfileChanged()
    End Sub
    Partial Private Sub OnReceiveNewsletterChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReceiveNewsletterChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WebsiteUrl", DbType:="NVarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property WebsiteUrl() As String
		Get
			Return Me._WebsiteUrl
		End Get
		Set
			If (String.Equals(Me._WebsiteUrl, value) = false) Then
				Me.OnWebsiteUrlChanging(value)
				Me.SendPropertyChanging
				Me._WebsiteUrl = value
				Me.SendPropertyChanged("WebsiteUrl")
				Me.OnWebsiteUrlChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Profile", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Profile() As String
		Get
			Return Me._Profile
		End Get
		Set
			If (String.Equals(Me._Profile, value) = false) Then
				Me.OnProfileChanging(value)
				Me.SendPropertyChanging
				Me._Profile = value
				Me.SendPropertyChanged("Profile")
				Me.OnProfileChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceiveNewsletter", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReceiveNewsletter() As Boolean
		Get
			Return Me._ReceiveNewsletter
		End Get
		Set
			If ((Me._ReceiveNewsletter = value)  _
						= false) Then
				Me.OnReceiveNewsletterChanging(value)
				Me.SendPropertyChanging
				Me._ReceiveNewsletter = value
				Me.SendPropertyChanged("ReceiveNewsletter")
				Me.OnReceiveNewsletterChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.BlogComment")>  _
Partial Public Class BlogComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _BlogId As Integer
	
	Private _AuthorUserName As String
	
	Private _Title As String
	
	Private _Comment As String
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _Version() As Byte
	
	Private _Blog As EntityRef(Of Blog)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnBlogIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBlogIdChanged()
    End Sub
    Partial Private Sub OnAuthorUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorUserNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Blog = CType(Nothing, EntityRef(Of Blog))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BlogId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BlogId() As Integer
		Get
			Return Me._BlogId
		End Get
		Set
			If ((Me._BlogId = value)  _
						= false) Then
				If Me._Blog.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBlogIdChanging(value)
				Me.SendPropertyChanging
				Me._BlogId = value
				Me.SendPropertyChanged("BlogId")
				Me.OnBlogIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AuthorUserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AuthorUserName() As String
		Get
			Return Me._AuthorUserName
		End Get
		Set
			If (String.Equals(Me._AuthorUserName, value) = false) Then
				Me.OnAuthorUserNameChanging(value)
				Me.SendPropertyChanging
				Me._AuthorUserName = value
				Me.SendPropertyChanged("AuthorUserName")
				Me.OnAuthorUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Blog_BlogComment", Storage:="_Blog", ThisKey:="BlogId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Blog() As Blog
		Get
			Return Me._Blog.Entity
		End Get
		Set
			Dim previousValue As Blog = Me._Blog.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Blog.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Blog.Entity = Nothing
					previousValue.BlogComments.Remove(Me)
				End If
				Me._Blog.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogComments.Add(Me)
					Me._BlogId = value.Id
				Else
					Me._BlogId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Blog")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.BlogTag")>  _
Partial Public Class BlogTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _BlogId As Integer
	
	Private _Name As String
	
	Private _Version() As Byte
	
	Private _Blog As EntityRef(Of Blog)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnBlogIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBlogIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Blog = CType(Nothing, EntityRef(Of Blog))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BlogId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BlogId() As Integer
		Get
			Return Me._BlogId
		End Get
		Set
			If ((Me._BlogId = value)  _
						= false) Then
				If Me._Blog.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBlogIdChanging(value)
				Me.SendPropertyChanging
				Me._BlogId = value
				Me.SendPropertyChanged("BlogId")
				Me.OnBlogIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Blog_BlogTag", Storage:="_Blog", ThisKey:="BlogId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Blog() As Blog
		Get
			Return Me._Blog.Entity
		End Get
		Set
			Dim previousValue As Blog = Me._Blog.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Blog.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Blog.Entity = Nothing
					previousValue.BlogTags.Remove(Me)
				End If
				Me._Blog.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogTags.Add(Me)
					Me._BlogId = value.Id
				Else
					Me._BlogId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Blog")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Book")>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Authors As String
	
	Private _Description As String
	
	Private _BuyLink As String
	
	Private _CoverPicture As String
	
	Private _Version() As Byte
	
	Private _Chapters As EntitySet(Of Chapter)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnAuthorsChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBuyLinkChanging(value As String)
    End Sub
    Partial Private Sub OnBuyLinkChanged()
    End Sub
    Partial Private Sub OnCoverPictureChanging(value As String)
    End Sub
    Partial Private Sub OnCoverPictureChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Chapters = New EntitySet(Of Chapter)(AddressOf Me.attach_Chapters, AddressOf Me.detach_Chapters)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Authors", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Authors() As String
		Get
			Return Me._Authors
		End Get
		Set
			If (String.Equals(Me._Authors, value) = false) Then
				Me.OnAuthorsChanging(value)
				Me.SendPropertyChanging
				Me._Authors = value
				Me.SendPropertyChanged("Authors")
				Me.OnAuthorsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BuyLink", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BuyLink() As String
		Get
			Return Me._BuyLink
		End Get
		Set
			If (String.Equals(Me._BuyLink, value) = false) Then
				Me.OnBuyLinkChanging(value)
				Me.SendPropertyChanging
				Me._BuyLink = value
				Me.SendPropertyChanged("BuyLink")
				Me.OnBuyLinkChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CoverPicture", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CoverPicture() As String
		Get
			Return Me._CoverPicture
		End Get
		Set
			If (String.Equals(Me._CoverPicture, value) = false) Then
				Me.OnCoverPictureChanging(value)
				Me.SendPropertyChanging
				Me._CoverPicture = value
				Me.SendPropertyChanged("CoverPicture")
				Me.OnCoverPictureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Book_Chapter", Storage:="_Chapters", OtherKey:="BookId")>  _
	Public Property Chapters() As EntitySet(Of Chapter)
		Get
			Return Me._Chapters
		End Get
		Set
			Me._Chapters.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Chapters(ByVal entity As Chapter)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_Chapters(ByVal entity As Chapter)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
End Class

<Table(Name:="dbo.Chapter")>  _
Partial Public Class Chapter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _BookId As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _OrderNumber As Integer
	
	Private _Version() As Byte
	
	Private _Listings As EntitySet(Of Listing)
	
	Private _Book As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnBookIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBookIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnOrderNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderNumberChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Listings = New EntitySet(Of Listing)(AddressOf Me.attach_Listings, AddressOf Me.detach_Listings)
		Me._Book = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BookId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BookId() As Integer
		Get
			Return Me._BookId
		End Get
		Set
			If ((Me._BookId = value)  _
						= false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBookIdChanging(value)
				Me.SendPropertyChanging
				Me._BookId = value
				Me.SendPropertyChanged("BookId")
				Me.OnBookIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderNumber", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OrderNumber() As Integer
		Get
			Return Me._OrderNumber
		End Get
		Set
			If ((Me._OrderNumber = value)  _
						= false) Then
				Me.OnOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._OrderNumber = value
				Me.SendPropertyChanged("OrderNumber")
				Me.OnOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Chapter_Listing", Storage:="_Listings", OtherKey:="ChapterId")>  _
	Public Property Listings() As EntitySet(Of Listing)
		Get
			Return Me._Listings
		End Get
		Set
			Me._Listings.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Book_Chapter", Storage:="_Book", ThisKey:="BookId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.Chapters.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Chapters.Add(Me)
					Me._BookId = value.Id
				Else
					Me._BookId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Listings(ByVal entity As Listing)
		Me.SendPropertyChanging
		entity.Chapter = Me
	End Sub
	
	Private Sub detach_Listings(ByVal entity As Listing)
		Me.SendPropertyChanging
		entity.Chapter = Nothing
	End Sub
End Class

<Table(Name:="dbo.CodeSample")>  _
Partial Public Class CodeSample
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EntryId As Integer
	
	Private _FileName As String
	
	Private _LanguageId As System.Nullable(Of Integer)
	
	Private _Code As String
	
	Private _TryItCode As String
	
	Private _EnableTryIt As Boolean
	
	Private _Description As String
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _DateModified As System.Nullable(Of Date)
	
	Private _Version() As Byte
	
	Private _CodeSampleLanguage As EntityRef(Of CodeSampleLanguage)
	
	Private _Entry As EntityRef(Of Entry)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnLanguageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLanguageIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnTryItCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTryItCodeChanged()
    End Sub
    Partial Private Sub OnEnableTryItChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnableTryItChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CodeSampleLanguage = CType(Nothing, EntityRef(Of CodeSampleLanguage))
		Me._Entry = CType(Nothing, EntityRef(Of Entry))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				If Me._Entry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FileName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FileName() As String
		Get
			Return Me._FileName
		End Get
		Set
			If (String.Equals(Me._FileName, value) = false) Then
				Me.OnFileNameChanging(value)
				Me.SendPropertyChanging
				Me._FileName = value
				Me.SendPropertyChanged("FileName")
				Me.OnFileNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LanguageId", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LanguageId() As System.Nullable(Of Integer)
		Get
			Return Me._LanguageId
		End Get
		Set
			If (Me._LanguageId.Equals(value) = false) Then
				If Me._CodeSampleLanguage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnLanguageIdChanging(value)
				Me.SendPropertyChanging
				Me._LanguageId = value
				Me.SendPropertyChanged("LanguageId")
				Me.OnLanguageIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TryItCode", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TryItCode() As String
		Get
			Return Me._TryItCode
		End Get
		Set
			If (String.Equals(Me._TryItCode, value) = false) Then
				Me.OnTryItCodeChanging(value)
				Me.SendPropertyChanging
				Me._TryItCode = value
				Me.SendPropertyChanged("TryItCode")
				Me.OnTryItCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EnableTryIt", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EnableTryIt() As Boolean
		Get
			Return Me._EnableTryIt
		End Get
		Set
			If ((Me._EnableTryIt = value)  _
						= false) Then
				Me.OnEnableTryItChanging(value)
				Me.SendPropertyChanging
				Me._EnableTryIt = value
				Me.SendPropertyChanged("EnableTryIt")
				Me.OnEnableTryItChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_DateModified", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DateModified() As System.Nullable(Of Date)
		Get
			Return Me._DateModified
		End Get
		Set
			If (Me._DateModified.Equals(value) = false) Then
				Me.OnDateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._DateModified = value
				Me.SendPropertyChanged("DateModified")
				Me.OnDateModifiedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CodeSampleLanguage_CodeSample", Storage:="_CodeSampleLanguage", ThisKey:="LanguageId", IsForeignKey:=true)>  _
	Public Property CodeSampleLanguage() As CodeSampleLanguage
		Get
			Return Me._CodeSampleLanguage.Entity
		End Get
		Set
			Dim previousValue As CodeSampleLanguage = Me._CodeSampleLanguage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CodeSampleLanguage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CodeSampleLanguage.Entity = Nothing
					previousValue.CodeSamples.Remove(Me)
				End If
				Me._CodeSampleLanguage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CodeSamples.Add(Me)
					Me._LanguageId = value.Id
				Else
					Me._LanguageId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CodeSampleLanguage")
			End If
		End Set
	End Property
	
	<Association(Name:="Entry_CodeSample", Storage:="_Entry", ThisKey:="EntryId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Entry() As Entry
		Get
			Return Me._Entry.Entity
		End Get
		Set
			Dim previousValue As Entry = Me._Entry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entry.Entity = Nothing
					previousValue.CodeSamples.Remove(Me)
				End If
				Me._Entry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CodeSamples.Add(Me)
					Me._EntryId = value.Id
				Else
					Me._EntryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entry")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CodeSampleLanguage")>  _
Partial Public Class CodeSampleLanguage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _CodeSamples As EntitySet(Of CodeSample)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CodeSamples = New EntitySet(Of CodeSample)(AddressOf Me.attach_CodeSamples, AddressOf Me.detach_CodeSamples)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CodeSampleLanguage_CodeSample", Storage:="_CodeSamples", OtherKey:="LanguageId")>  _
	Public Property CodeSamples() As EntitySet(Of CodeSample)
		Get
			Return Me._CodeSamples
		End Get
		Set
			Me._CodeSamples.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CodeSamples(ByVal entity As CodeSample)
		Me.SendPropertyChanging
		entity.CodeSampleLanguage = Me
	End Sub
	
	Private Sub detach_CodeSamples(ByVal entity As CodeSample)
		Me.SendPropertyChanging
		entity.CodeSampleLanguage = Nothing
	End Sub
End Class

<Table(Name:="dbo.Entry")>  _
Partial Public Class Entry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _AuthorUserName As String
	
	Private _Title As String
	
	Private _IntroductionText As String
	
	Private _Description As String
	
	Private _ViewCount As Integer
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _DateModified As System.Nullable(Of Date)
	
	Private _Version() As Byte
	
	Private _CodeSamples As EntitySet(Of CodeSample)
	
	Private _EntryComments As EntitySet(Of EntryComment)
	
	Private _EntryTags As EntitySet(Of EntryTag)
	
	Private _RelatedEntries As EntitySet(Of RelatedEntry)
	
	Private _RelatedEntries1 As EntitySet(Of RelatedEntry)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAuthorUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorUserNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnIntroductionTextChanging(value As String)
    End Sub
    Partial Private Sub OnIntroductionTextChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnViewCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewCountChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CodeSamples = New EntitySet(Of CodeSample)(AddressOf Me.attach_CodeSamples, AddressOf Me.detach_CodeSamples)
		Me._EntryComments = New EntitySet(Of EntryComment)(AddressOf Me.attach_EntryComments, AddressOf Me.detach_EntryComments)
		Me._EntryTags = New EntitySet(Of EntryTag)(AddressOf Me.attach_EntryTags, AddressOf Me.detach_EntryTags)
		Me._RelatedEntries = New EntitySet(Of RelatedEntry)(AddressOf Me.attach_RelatedEntries, AddressOf Me.detach_RelatedEntries)
		Me._RelatedEntries1 = New EntitySet(Of RelatedEntry)(AddressOf Me.attach_RelatedEntries1, AddressOf Me.detach_RelatedEntries1)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AuthorUserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AuthorUserName() As String
		Get
			Return Me._AuthorUserName
		End Get
		Set
			If (String.Equals(Me._AuthorUserName, value) = false) Then
				Me.OnAuthorUserNameChanging(value)
				Me.SendPropertyChanging
				Me._AuthorUserName = value
				Me.SendPropertyChanged("AuthorUserName")
				Me.OnAuthorUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IntroductionText", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IntroductionText() As String
		Get
			Return Me._IntroductionText
		End Get
		Set
			If (String.Equals(Me._IntroductionText, value) = false) Then
				Me.OnIntroductionTextChanging(value)
				Me.SendPropertyChanging
				Me._IntroductionText = value
				Me.SendPropertyChanged("IntroductionText")
				Me.OnIntroductionTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ViewCount", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ViewCount() As Integer
		Get
			Return Me._ViewCount
		End Get
		Set
			If ((Me._ViewCount = value)  _
						= false) Then
				Me.OnViewCountChanging(value)
				Me.SendPropertyChanging
				Me._ViewCount = value
				Me.SendPropertyChanged("ViewCount")
				Me.OnViewCountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_DateModified", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DateModified() As System.Nullable(Of Date)
		Get
			Return Me._DateModified
		End Get
		Set
			If (Me._DateModified.Equals(value) = false) Then
				Me.OnDateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._DateModified = value
				Me.SendPropertyChanged("DateModified")
				Me.OnDateModifiedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Entry_CodeSample", Storage:="_CodeSamples", OtherKey:="EntryId")>  _
	Public Property CodeSamples() As EntitySet(Of CodeSample)
		Get
			Return Me._CodeSamples
		End Get
		Set
			Me._CodeSamples.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Entry_EntryComment", Storage:="_EntryComments", OtherKey:="EntryId")>  _
	Public Property EntryComments() As EntitySet(Of EntryComment)
		Get
			Return Me._EntryComments
		End Get
		Set
			Me._EntryComments.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Entry_EntryTag", Storage:="_EntryTags", OtherKey:="EntryId")>  _
	Public Property EntryTags() As EntitySet(Of EntryTag)
		Get
			Return Me._EntryTags
		End Get
		Set
			Me._EntryTags.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Entry_RelatedEntry", Storage:="_RelatedEntries", OtherKey:="EntryId")>  _
	Public Property RelatedEntries() As EntitySet(Of RelatedEntry)
		Get
			Return Me._RelatedEntries
		End Get
		Set
			Me._RelatedEntries.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Entry_RelatedEntry1", Storage:="_RelatedEntries1", OtherKey:="RelatedEntryId")>  _
	Public Property RelatedEntries1() As EntitySet(Of RelatedEntry)
		Get
			Return Me._RelatedEntries1
		End Get
		Set
			Me._RelatedEntries1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CodeSamples(ByVal entity As CodeSample)
		Me.SendPropertyChanging
		entity.Entry = Me
	End Sub
	
	Private Sub detach_CodeSamples(ByVal entity As CodeSample)
		Me.SendPropertyChanging
		entity.Entry = Nothing
	End Sub
	
	Private Sub attach_EntryComments(ByVal entity As EntryComment)
		Me.SendPropertyChanging
		entity.Entry = Me
	End Sub
	
	Private Sub detach_EntryComments(ByVal entity As EntryComment)
		Me.SendPropertyChanging
		entity.Entry = Nothing
	End Sub
	
	Private Sub attach_EntryTags(ByVal entity As EntryTag)
		Me.SendPropertyChanging
		entity.Entry = Me
	End Sub
	
	Private Sub detach_EntryTags(ByVal entity As EntryTag)
		Me.SendPropertyChanging
		entity.Entry = Nothing
	End Sub
	
	Private Sub attach_RelatedEntries(ByVal entity As RelatedEntry)
		Me.SendPropertyChanging
		entity.Entry = Me
	End Sub
	
	Private Sub detach_RelatedEntries(ByVal entity As RelatedEntry)
		Me.SendPropertyChanging
		entity.Entry = Nothing
	End Sub
	
	Private Sub attach_RelatedEntries1(ByVal entity As RelatedEntry)
		Me.SendPropertyChanging
		entity.Entry1 = Me
	End Sub
	
	Private Sub detach_RelatedEntries1(ByVal entity As RelatedEntry)
		Me.SendPropertyChanging
		entity.Entry1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.EntryComments")>  _
Partial Public Class EntryComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EntryId As Integer
	
	Private _UserName As String
	
	Private _Comment As String
	
	Private _DateCreated As String = CType(Nothing, String)
	
	Private _Entry As EntityRef(Of Entry)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entry = CType(Nothing, EntityRef(Of Entry))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL")>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				If Me._Entry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As String
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Association(Name:="Entry_EntryComment", Storage:="_Entry", ThisKey:="EntryId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Entry() As Entry
		Get
			Return Me._Entry.Entity
		End Get
		Set
			Dim previousValue As Entry = Me._Entry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entry.Entity = Nothing
					previousValue.EntryComments.Remove(Me)
				End If
				Me._Entry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EntryComments.Add(Me)
					Me._EntryId = value.Id
				Else
					Me._EntryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entry")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.EntryRating")>  _
Partial Public Class EntryRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EntryId As Integer
	
	Private _Rating As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL")>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Rating", DbType:="Int NOT NULL")>  _
	Public Property Rating() As Integer
		Get
			Return Me._Rating
		End Get
		Set
			If ((Me._Rating = value)  _
						= false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.EntryTag")>  _
Partial Public Class EntryTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EntryId As Integer
	
	Private _Name As String
	
	Private _Version() As Byte
	
	Private _Entry As EntityRef(Of Entry)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entry = CType(Nothing, EntityRef(Of Entry))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				If Me._Entry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Entry_EntryTag", Storage:="_Entry", ThisKey:="EntryId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Entry() As Entry
		Get
			Return Me._Entry.Entity
		End Get
		Set
			Dim previousValue As Entry = Me._Entry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entry.Entity = Nothing
					previousValue.EntryTags.Remove(Me)
				End If
				Me._Entry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EntryTags.Add(Me)
					Me._EntryId = value.Id
				Else
					Me._EntryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entry")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Listing")>  _
Partial Public Class Listing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ChapterId As Integer
	
	Private _EntryId As Integer
	
	Private _OrderNumber As Integer
	
	Private _Version() As Byte
	
	Private _Chapter As EntityRef(Of Chapter)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnChapterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnChapterIdChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnOrderNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderNumberChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As Byte())
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Chapter = CType(Nothing, EntityRef(Of Chapter))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChapterId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ChapterId() As Integer
		Get
			Return Me._ChapterId
		End Get
		Set
			If ((Me._ChapterId = value)  _
						= false) Then
				If Me._Chapter.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnChapterIdChanging(value)
				Me.SendPropertyChanging
				Me._ChapterId = value
				Me.SendPropertyChanged("ChapterId")
				Me.OnChapterIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderNumber", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OrderNumber() As Integer
		Get
			Return Me._OrderNumber
		End Get
		Set
			If ((Me._OrderNumber = value)  _
						= false) Then
				Me.OnOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._OrderNumber = value
				Me.SendPropertyChanged("OrderNumber")
				Me.OnOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As Byte()
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Chapter_Listing", Storage:="_Chapter", ThisKey:="ChapterId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Chapter() As Chapter
		Get
			Return Me._Chapter.Entity
		End Get
		Set
			Dim previousValue As Chapter = Me._Chapter.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Chapter.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Chapter.Entity = Nothing
					previousValue.Listings.Remove(Me)
				End If
				Me._Chapter.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Listings.Add(Me)
					Me._ChapterId = value.Id
				Else
					Me._ChapterId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Chapter")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.RelatedEntries")>  _
Partial Public Class RelatedEntry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserName As String
	
	Private _EntryId As Integer
	
	Private _RelatedEntryId As Integer
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _Entry As EntityRef(Of Entry)
	
	Private _Entry1 As EntityRef(Of Entry)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntryIdChanged()
    End Sub
    Partial Private Sub OnRelatedEntryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRelatedEntryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entry = CType(Nothing, EntityRef(Of Entry))
		Me._Entry1 = CType(Nothing, EntityRef(Of Entry))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntryId", DbType:="Int NOT NULL")>  _
	Public Property EntryId() As Integer
		Get
			Return Me._EntryId
		End Get
		Set
			If ((Me._EntryId = value)  _
						= false) Then
				If Me._Entry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._EntryId = value
				Me.SendPropertyChanged("EntryId")
				Me.OnEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RelatedEntryId", DbType:="Int NOT NULL")>  _
	Public Property RelatedEntryId() As Integer
		Get
			Return Me._RelatedEntryId
		End Get
		Set
			If ((Me._RelatedEntryId = value)  _
						= false) Then
				If Me._Entry1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnRelatedEntryIdChanging(value)
				Me.SendPropertyChanging
				Me._RelatedEntryId = value
				Me.SendPropertyChanged("RelatedEntryId")
				Me.OnRelatedEntryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Association(Name:="Entry_RelatedEntry", Storage:="_Entry", ThisKey:="EntryId", IsForeignKey:=true)>  _
	Public Property Entry() As Entry
		Get
			Return Me._Entry.Entity
		End Get
		Set
			Dim previousValue As Entry = Me._Entry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entry.Entity = Nothing
					previousValue.RelatedEntries.Remove(Me)
				End If
				Me._Entry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RelatedEntries.Add(Me)
					Me._EntryId = value.Id
				Else
					Me._EntryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entry")
			End If
		End Set
	End Property
	
	<Association(Name:="Entry_RelatedEntry1", Storage:="_Entry1", ThisKey:="RelatedEntryId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Entry1() As Entry
		Get
			Return Me._Entry1.Entity
		End Get
		Set
			Dim previousValue As Entry = Me._Entry1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entry1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entry1.Entity = Nothing
					previousValue.RelatedEntries1.Remove(Me)
				End If
				Me._Entry1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RelatedEntries1.Add(Me)
					Me._RelatedEntryId = value.Id
				Else
					Me._RelatedEntryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entry1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
